import 'dotenv/config';
import { Bot } from 'grammy';
import fetch from 'node-fetch';

const TG_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!TG_TOKEN) throw new Error('Missing TELEGRAM_BOT_TOKEN');
if (!GEMINI_API_KEY) throw new Error('Missing GEMINI_API_KEY');

const bot = new Bot(TG_TOKEN);

// ===== –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç =====
const systemPrompt = [
  'You are a professional paraphraser.',
  'Task: rewrite the user text in the SAME language (Russian or English).',
  'Keep the meaning and facts unchanged.',
  'Improve grammar and clarity; keep roughly similar length.',
  'Preserve names, numbers, links, hashtags, emojis.',
  'Maintain lists and line breaks.',
  'DO NOT add new info or commentary.',
  'Return ONLY the rewritten text, no explanations.'
].join(' ');

// ===== –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ =====
function chunkText(text, max = 4000) {
  const chunks = [];
  let rest = text;
  while (rest.length > max) {
    let cut = rest.lastIndexOf(' ', max);
    if (cut === -1) cut = max;
    chunks.push(rest.slice(0, cut));
    rest = rest.slice(cut).trimStart();
  }
  if (rest) chunks.push(rest);
  return chunks;
}

// ===== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ =====
bot.command('start', (ctx) => {
  ctx.reply(`
–ü—Ä–∏–≤–µ—Ç! üëã
–Ø AI –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.

–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ: @Ardasher_B
`);
});

bot.command('help', (ctx) => {
  ctx.reply(`
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/paraphrase - –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
/contact - –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: @Ardasher_B
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
`);
});

bot.command('about', (ctx) => {
  ctx.reply('AI –±–æ—Ç, —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º –≤ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ê–≤—Ç–æ—Ä: @Ardasher_B');
});

bot.command('contact', (ctx) => {
  ctx.reply('–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: @Ardasher_B');
});

// ===== –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ =====
bot.on('message:text', async (ctx) => {
  const text = ctx.message?.reply_to_message?.text ?? ctx.message.text;

  try {
    const resAI = await fetch(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-goog-api-key': GEMINI_API_KEY,
        },
        body: JSON.stringify({
          contents: [
            {
              "role": "user",
              "parts": [{ "text": systemPrompt }]
            },
            {
              "role": "model",
              "parts": [{ "text": "OK." }]
            },
            {
              "role": "user",
              "parts": [{ "text": text }]
            }
          ]
        })
      }
    );

    const data = await resAI.json();
    console.log("Gemini response:", JSON.stringify(data, null, 2));

    const answer = data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
    if (!answer) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.');

    for (const part of chunkText(answer)) {
      await ctx.reply(part);
    }

  } catch (err) {
    console.error('Error:', err);
    try {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–∏.');
    } catch (e) {
      console.error("Failed to reply:", e);
    }
  }
});

// ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
bot.start();
console.log("Bot started in long polling mode");